/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package bankmanagement;

import java.awt.Color;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.*;
import java.sql.*;
import java.text.SimpleDateFormat;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import java.time.format.DateTimeFormatter;
import java.time.LocalDateTime;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Janeesha
 */
public class createAccount extends javax.swing.JFrame {

    /**
     * Creates new form CreateAccount
     */
    Connection conn;
    String name, nic, birthDate, email, password, contactNumber, date;
    String path;
    InputStream img;
    int age, sex, accType, accNumber, duration, rowCount1, rowCount2;
    double initialAmount, interestRate, totalAmount;

    public createAccount() {
        initComponents();

        jPanel1.setVisible((true));
        jPanel2.setVisible((false));
        jPanel3.setVisible((false));
        //jPanel1.setBackground(new Color(0, 0, 0, 0));
        jPasswordField1.setBackground(new Color(0, 0, 0, 1));
        createAccBtn.setBackground(new Color(0, 0, 0, 0));
        //jDateChooser1.setBackground(new Color(0, 0, 0, 1));
        jButton1.setBackground(new Color(0, 0, 0, 0));
        //jButton2.setBackground(new Color(0, 0, 0, 0));
        //jButton3.setBackground(new Color(0, 0, 0, 0));
        //jComboBox1.setBackground(new Color(0, 0, 0, 1));
        jTextField1.setBackground(new Color(0, 0, 0, 1));
        jTextField2.setBackground(new Color(0, 0, 0, 1));
        jTextField3.setBackground(new Color(0, 0, 0, 1));
        jTextField4.setBackground(new Color(0, 0, 0, 1));
        jTextField5.setBackground(new Color(0, 0, 0, 1));
        jTextField6.setBackground(new Color(0, 0, 0, 1));
        jTextField7.setBackground(new Color(0, 0, 0, 1));
        //jTextField8.setBackground(new Color(0, 0, 0, 1));
        conn = dbConfig.getConnection();
        startChecker1();
        startChecker2();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        adminIcon = new javax.swing.JLabel();
        homeIcon = new javax.swing.JLabel();
        jPasswordField1 = new javax.swing.JPasswordField();
        maleRadioBtn = new javax.swing.JRadioButton();
        femaleRadioBtn = new javax.swing.JRadioButton();
        savingRadioBtn = new javax.swing.JRadioButton();
        currentRadioBtn = new javax.swing.JRadioButton();
        fixedRadioBtn = new javax.swing.JRadioButton();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jTextField5 = new javax.swing.JTextField();
        jTextField6 = new javax.swing.JTextField();
        jTextField7 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        createAccBtn = new javax.swing.JButton();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jLabel7 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jTextField8 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1250, 700));
        setUndecorated(true);
        getContentPane().setLayout(null);

        jPanel1.setLayout(null);

        adminIcon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                adminIconMouseClicked(evt);
            }
        });
        jPanel1.add(adminIcon);
        adminIcon.setBounds(1070, 0, 70, 50);

        homeIcon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                homeIconMouseClicked(evt);
            }
        });
        jPanel1.add(homeIcon);
        homeIcon.setBounds(1160, 0, 70, 50);

        jPasswordField1.setFont(new java.awt.Font("Comic Sans MS", 0, 15)); // NOI18N
        jPasswordField1.setForeground(new java.awt.Color(98, 9, 17));
        jPasswordField1.setBorder(null);
        jPanel1.add(jPasswordField1);
        jPasswordField1.setBounds(550, 510, 160, 25);

        maleRadioBtn.setBackground(new java.awt.Color(227, 242, 254));
        maleRadioBtn.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        maleRadioBtn.setText("Male");
        maleRadioBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maleRadioBtnActionPerformed(evt);
            }
        });
        jPanel1.add(maleRadioBtn);
        maleRadioBtn.setBounds(550, 400, 70, 25);

        femaleRadioBtn.setBackground(new java.awt.Color(227, 242, 254));
        femaleRadioBtn.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        femaleRadioBtn.setText("Female");
        femaleRadioBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                femaleRadioBtnActionPerformed(evt);
            }
        });
        jPanel1.add(femaleRadioBtn);
        femaleRadioBtn.setBounds(630, 400, 90, 25);

        savingRadioBtn.setBackground(new java.awt.Color(227, 242, 254));
        savingRadioBtn.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        savingRadioBtn.setText("Saving");
        savingRadioBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savingRadioBtnActionPerformed(evt);
            }
        });
        jPanel1.add(savingRadioBtn);
        savingRadioBtn.setBounds(960, 400, 80, 29);

        currentRadioBtn.setBackground(new java.awt.Color(227, 242, 254));
        currentRadioBtn.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        currentRadioBtn.setText("Current");
        currentRadioBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                currentRadioBtnActionPerformed(evt);
            }
        });
        jPanel1.add(currentRadioBtn);
        currentRadioBtn.setBounds(1050, 400, 80, 29);

        fixedRadioBtn.setBackground(new java.awt.Color(227, 242, 254));
        fixedRadioBtn.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        fixedRadioBtn.setText("Fixed");
        fixedRadioBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fixedRadioBtnActionPerformed(evt);
            }
        });
        jPanel1.add(fixedRadioBtn);
        fixedRadioBtn.setBounds(1140, 400, 80, 29);

        jTextField1.setFont(new java.awt.Font("Comic Sans MS", 0, 15)); // NOI18N
        jTextField1.setForeground(new java.awt.Color(98, 9, 17));
        jTextField1.setBorder(null);
        jTextField1.setMargin(new java.awt.Insets(10, 10, 10, 10));
        jPanel1.add(jTextField1);
        jTextField1.setBounds(550, 298, 210, 22);

        jTextField2.setFont(new java.awt.Font("Comic Sans MS", 0, 15)); // NOI18N
        jTextField2.setForeground(new java.awt.Color(98, 9, 17));
        jTextField2.setBorder(null);
        jTextField2.setMargin(new java.awt.Insets(10, 10, 10, 10));
        jTextField2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField2KeyTyped(evt);
            }
        });
        jPanel1.add(jTextField2);
        jTextField2.setBounds(975, 298, 200, 22);

        jTextField3.setFont(new java.awt.Font("Comic Sans MS", 0, 15)); // NOI18N
        jTextField3.setForeground(new java.awt.Color(98, 9, 17));
        jTextField3.setBorder(null);
        jTextField3.setMargin(new java.awt.Insets(10, 10, 10, 10));
        jPanel1.add(jTextField3);
        jTextField3.setBounds(550, 347, 210, 22);

        jTextField4.setFont(new java.awt.Font("Comic Sans MS", 0, 15)); // NOI18N
        jTextField4.setForeground(new java.awt.Color(98, 9, 17));
        jTextField4.setBorder(null);
        jTextField4.setMargin(new java.awt.Insets(10, 10, 10, 10));
        jPanel1.add(jTextField4);
        jTextField4.setBounds(1010, 590, 170, 22);

        jTextField5.setFont(new java.awt.Font("Comic Sans MS", 0, 15)); // NOI18N
        jTextField5.setForeground(new java.awt.Color(98, 9, 17));
        jTextField5.setBorder(null);
        jTextField5.setMargin(new java.awt.Insets(10, 10, 10, 10));
        jPanel1.add(jTextField5);
        jTextField5.setBounds(590, 464, 140, 22);

        jTextField6.setFont(new java.awt.Font("Comic Sans MS", 0, 15)); // NOI18N
        jTextField6.setForeground(new java.awt.Color(98, 9, 17));
        jTextField6.setBorder(null);
        jTextField6.setMargin(new java.awt.Insets(10, 10, 10, 10));
        jPanel1.add(jTextField6);
        jTextField6.setBounds(980, 464, 200, 22);

        jTextField7.setFont(new java.awt.Font("Comic Sans MS", 0, 15)); // NOI18N
        jTextField7.setForeground(new java.awt.Color(98, 9, 17));
        jTextField7.setBorder(null);
        jTextField7.setMargin(new java.awt.Insets(10, 10, 10, 10));
        jPanel1.add(jTextField7);
        jTextField7.setBounds(980, 512, 210, 25);

        jLabel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel3MouseClicked(evt);
            }
        });
        jPanel1.add(jLabel3);
        jLabel3.setBounds(10, 640, 290, 40);

        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });
        jPanel1.add(jLabel2);
        jLabel2.setBounds(960, 0, 90, 50);
        jPanel1.add(jLabel4);
        jLabel4.setBounds(720, 90, 140, 180);

        jButton1.setBorder(null);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1);
        jButton1.setBounds(860, 230, 50, 40);

        createAccBtn.setBorder(null);
        createAccBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createAccBtnActionPerformed(evt);
            }
        });
        jPanel1.add(createAccBtn);
        createAccBtn.setBounds(620, 605, 320, 40);
        jPanel1.add(jDateChooser1);
        jDateChooser1.setBounds(970, 342, 210, 30);

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/system images/create account.png"))); // NOI18N
        jPanel1.add(jLabel7);
        jLabel7.setBounds(0, 0, 1250, 700);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(0, 0, 1250, 700);

        jPanel2.setLayout(null);

        jTextField8.setEditable(false);
        jTextField8.setFont(new java.awt.Font("Comic Sans MS", 0, 19)); // NOI18N
        jTextField8.setBorder(null);
        jPanel2.add(jTextField8);
        jTextField8.setBounds(850, 290, 110, 40);

        jButton2.setBorder(null);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton2);
        jButton2.setBounds(1120, 600, 70, 50);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/system images/success-create account.png"))); // NOI18N
        jPanel2.add(jLabel1);
        jLabel1.setBounds(0, 0, 1250, 700);

        getContentPane().add(jPanel2);
        jPanel2.setBounds(0, 0, 1250, 700);

        jPanel3.setLayout(null);

        jButton3.setBorder(null);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton3);
        jButton3.setBounds(1120, 600, 70, 50);

        jComboBox1.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "12 months", "24 months", "36 months", "48 months", "60 months", "72 months" }));
        jComboBox1.setBorder(null);
        jPanel3.add(jComboBox1);
        jComboBox1.setBounds(900, 150, 230, 30);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Duration (months)", "Interest Rate (%)"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setRowHeight(35);
        jTable1.setShowGrid(true);
        jScrollPane1.setViewportView(jTable1);

        jPanel3.add(jScrollPane1);
        jScrollPane1.setBounds(630, 330, 300, 280);

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/system images/open fixed.png"))); // NOI18N
        jPanel3.add(jLabel5);
        jLabel5.setBounds(0, 0, 1250, 700);

        getContentPane().add(jPanel3);
        jPanel3.setBounds(0, 0, 1250, 700);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void maleRadioBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maleRadioBtnActionPerformed
        // TODO add your handling code here:
        if (maleRadioBtn.isSelected()) {
            femaleRadioBtn.setSelected(false);
            sex = 0;
        }
    }//GEN-LAST:event_maleRadioBtnActionPerformed

    private void femaleRadioBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_femaleRadioBtnActionPerformed
        // TODO add your handling code here:
        if (femaleRadioBtn.isSelected()) {
            maleRadioBtn.setSelected(false);
            sex = 1;
        }
    }//GEN-LAST:event_femaleRadioBtnActionPerformed

    private void savingRadioBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savingRadioBtnActionPerformed
        // TODO add your handling code here:
        if (savingRadioBtn.isSelected()) {
            currentRadioBtn.setSelected(false);
            fixedRadioBtn.setSelected(false);
            accType = 0;
        }
    }//GEN-LAST:event_savingRadioBtnActionPerformed

    private void currentRadioBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_currentRadioBtnActionPerformed
        // TODO add your handling code here:
        if (currentRadioBtn.isSelected()) {
            savingRadioBtn.setSelected(false);
            fixedRadioBtn.setSelected(false);
            accType = 1;
        }
    }//GEN-LAST:event_currentRadioBtnActionPerformed

    private void fixedRadioBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fixedRadioBtnActionPerformed
        // TODO add your handling code here:
        if (fixedRadioBtn.isSelected()) {
            savingRadioBtn.setSelected(false);
            currentRadioBtn.setSelected(false);
            accType = 2;
        }
    }//GEN-LAST:event_fixedRadioBtnActionPerformed

    private void createAccBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createAccBtnActionPerformed
        // TODO add your handling code here: 
        //jDateChooser1.getDateEditor().getUiComponent().getText();
        //Date dateFromDateChooser = jDateChooser1.getDate();
        //String dateString = String.format("%1$td-%1$tm-%1$tY", dateFromDateChooser);
        //System.out.println(jDateChooser1.getDate());
        //Date date2 = new SimpleDateFormat("yyyy-MM-dd"). parse(date); jDateChooser1. setDate(date2); 
        //Date date = jDateChooser1.getDate();
        //String strDate = DateFormat.getDateInstance().format(date);
        
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd HH-mm-ss");
        LocalDateTime now = LocalDateTime.now();
        date = dtf.format(now);

        if (validName() && validAge() && validNic() && validBirthDate() && validInitialAmount() && validContactNumber() && validPassword() && validEmail()) {
            if (getRowCountCustomerLogin() >= 1) {
                try {
                    PreparedStatement pa;               //savings,current,fixed all account holders details will be inserted to customerlogin table in database 

                    String query = "INSERT INTO `customerlogin` (`name` ,`age` ,`nic` ,`birthDate` ,`sex` ,`accType` ,`initialAmount` ,`contactNumber` ,`password` ,`email` ,`image` ,`accCreated` ) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)";
                    pa = conn.prepareStatement(query);
                    pa.setString(1, name);
                    pa.setInt(2, age);
                    pa.setString(3, nic);
                    pa.setString(4, birthDate);
                    pa.setInt(5, sex);
                    pa.setInt(6, accType);
                    pa.setDouble(7, initialAmount);
                    pa.setString(8, contactNumber);
                    pa.setString(9, password);
                    pa.setString(10, email);
                    pa.setString(12, date);

                    try {
                        if (path != null) {
                            img = new FileInputStream(new File(path));
                            pa.setBlob(11, img);
                        } else {
                            pa.setNull(11, java.sql.Types.NULL);
                        }
                        if (pa.executeUpdate() != 0) {
                            accNumber = getAccNumber();
                            insertData();

                            if (accType == 2) {
                                jPanel1.setVisible((false));
                                jPanel2.setVisible((false));
                                jPanel3.setVisible((true));

                                jButton3.setBackground(new Color(0, 0, 0, 0));
                                jComboBox1.setBackground(new Color(0, 0, 0, 1));
                                addTable();                                            //display fixed deposit interset rates with relavant duration in a table
                                jScrollPane1.getViewport().setBackground(new Color(227, 242, 254));
                            } else {
                                jPanel1.setVisible((false));
                                jPanel2.setVisible((true));
                                jPanel3.setVisible((false));

                                jTextField8.setBackground(new Color(0, 0, 0, 1));
                                jButton2.setBackground(new Color(0, 0, 0, 0));
                                jTextField8.setText(Integer.toString(accNumber));
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "Customer loggin failed !!!\nPlease try again ", "loggin failed", 2);
                        }
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(createAccount.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(createAccount.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_createAccBtnActionPerformed

    private void insertData() {
        try {
            PreparedStatement paa;

            String query = "INSERT INTO `accStatement` (`accountNumber` ,`description` ,`referenceNumber` ,`debit` , `credit` , `balance` , `date`) VALUES (?,?,?,?,?,?,?)";
            paa = conn.prepareStatement(query);
            paa.setInt(1, accNumber);
            paa.setString(2, "Opening Balance");
            paa.setInt(3, 0);
            paa.setDouble(4, initialAmount);
            paa.setDouble(5, 0.0);
            paa.setDouble(6, initialAmount);
            paa.setString(7, date);

            if (paa.executeUpdate() != 0) {
                //JOptionPane.showMessageDialog(null, "Your Account Details have been Succfully Recorded !", "success", 2);
            } else {
                JOptionPane.showMessageDialog(null, "Details aren't successfully recorded", "failed", 2);
            }
        } catch (SQLException ex) {
            Logger.getLogger(createAccount.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private int getAccNumber() {
        try {
            PreparedStatement paa;
            ResultSet rss;

            String queryy = "SELECT * FROM `customerlogin` WHERE `name` = ? && `nic` = ?";
            paa = conn.prepareStatement(queryy);
            paa.setString(1, name);
            paa.setString(2, nic);
            rss = paa.executeQuery();

            if (rss.next()) {
                accNumber = Integer.parseInt(rss.getString(1));
            }
        } catch (SQLException ex) {
            Logger.getLogger(createAccount.class.getName()).log(Level.SEVERE, null, ex);
        }
        return accNumber;
    }

    private void adminIconMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_adminIconMouseClicked
        // TODO add your handling code here:
        adminLogin log = new adminLogin();
        log.setVisible(true);
        log.pack();
        log.setLocationRelativeTo(null);
        this.dispose();
    }//GEN-LAST:event_adminIconMouseClicked

    private void homeIconMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_homeIconMouseClicked
        // TODO add your handling code here:
        homePage log = new homePage();
        log.setVisible(true);
        log.pack();
        log.setLocationRelativeTo(null);
        this.dispose();
    }//GEN-LAST:event_homeIconMouseClicked

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        // TODO add your handling code here:
        customerLogin log = new customerLogin();
        log.setVisible(true);
        log.pack();
        log.setLocationRelativeTo(null);
        this.dispose();
    }//GEN-LAST:event_jLabel2MouseClicked

    private void jLabel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel3MouseClicked
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jLabel3MouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String imge = null;
        BufferedImage img;
        JFileChooser chooser = new JFileChooser();
        //chooser.setCurrentDirectory(new File(System.getProperty("")));

        FileNameExtensionFilter extension = new FileNameExtensionFilter("*.Images", "jpg", "png", "jpeg");
        chooser.addChoosableFileFilter(extension);

        int filestate = chooser.showSaveDialog(null);
        if (filestate == JFileChooser.APPROVE_OPTION) {
            try {
                img = ImageIO.read(chooser.getSelectedFile());
                ImageIcon imageIcon = new ImageIcon(new ImageIcon(img).getImage().getScaledInstance(140, 180, Image.SCALE_DEFAULT));
                jLabel4.setIcon(imageIcon);
                File selectedImage = chooser.getSelectedFile();
                imge = selectedImage.getAbsolutePath();

                path = imge;
            } catch (IOException ex) {
                Logger.getLogger(createAccount.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField2KeyTyped
        // TODO add your handling code here:
        if (!Character.isDigit(evt.getKeyChar())) {
            evt.consume();
        }
    }//GEN-LAST:event_jTextField2KeyTyped

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        duration = (jComboBox1.getSelectedIndex() + 1) * 12;
        interestRate = getInterest();
        if (getRowCountfixedHolders() >= 1) {
            try {
                PreparedStatement paa;
                totalAmount = initialAmount + (initialAmount * interestRate) / 100.0;

                String query = "INSERT INTO `fixeddepositholders` (`accountNumber` ,`duration` ,`interestRate` ,`initialAmount` ,`totalAmount`) VALUES (?,?,?,?,?)";
                paa = conn.prepareStatement(query);
                paa.setInt(1, accNumber);
                paa.setInt(2, duration);
                paa.setDouble(3, interestRate);
                paa.setDouble(4, initialAmount);
                paa.setDouble(5, totalAmount);

                if (paa.executeUpdate() != 0) {
                    jPanel1.setVisible((false));
                    jPanel3.setVisible((false));
                    jPanel2.setVisible((true));

                    jTextField8.setBackground(new Color(0, 0, 0, 1));
                    jButton2.setBackground(new Color(0, 0, 0, 0));
                    jTextField8.setText(Integer.toString(accNumber));
                } else {
                    JOptionPane.showMessageDialog(null, "Details aren't successfully recorded", "failed", 2);
                }
            } catch (SQLException ex) {
                Logger.getLogger(createAccount.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        customerDashboard log = new customerDashboard(accNumber);
        log.setVisible(true);
        log.pack();
        log.setLocationRelativeTo(null);
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private boolean validName() {
        if (jTextField1.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Please Enter Your Name", "Error", 2);
            return false;
        } else {
            name = jTextField1.getText();
            return true;
        }
    }

    private boolean validAge() {
        if (jTextField2.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Please Enter Your Age", "Error", 2);
            return false;
        } else if (!jTextField2.getText().matches(".*\\d.*")) {
            JOptionPane.showMessageDialog(null, "Please Enter a Valid Age ", "Error", 2);
            jTextField2.setText("");
            return false;
        } else {
            age = Integer.parseInt(jTextField2.getText());
            return true;
        }
    }

    private boolean validNic() {
        if (jTextField3.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Please Enter Your NIC Number", "Error", 2);
            return false;
        } else {
            nic = jTextField3.getText();
            return true;
        }
    }

    private boolean validBirthDate() {
        if (jTextField4.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Please Enter Your Birth Date in yyyy-mm-dd format", "Error", 2);
            return false;
        } else {
            birthDate = jTextField4.getText();
            return true;
        }
    }

    private boolean validInitialAmount() {
        if (jTextField5.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Please Enter Initial Amount", "Error", 2);
            return false;
        } else if (!jTextField5.getText().matches("^\\d+\\.\\d+")) {
            JOptionPane.showMessageDialog(null, "Please Enter a Valid Initial Amount in double format!!!", "Error", 2);
            jTextField5.setText("");
            return false;
        } else {
            initialAmount = Double.parseDouble(jTextField5.getText());
            if (accType == 0) {
                if (initialAmount < 500.0) {
                    JOptionPane.showMessageDialog(null, "Initial amount for saving account should be >= Rs 500/=", "Error", 2);
                    jTextField5.setText("");
                    return false;
                }
            } else if (accType == 1) {
                if (initialAmount < 10000.0) {
                    JOptionPane.showMessageDialog(null, "Initial amount for current account should be >= Rs 10,000/=", "Error", 2);
                    jTextField5.setText("");
                    return false;
                }
            } else if (accType == 2) {
                if (initialAmount < 25000.0) {
                    JOptionPane.showMessageDialog(null, "Initial amount for fixed account should be >= Rs 25,000/=", "Error", 2);
                    jTextField5.setText("");
                    return false;
                }
            }
            return true;
        }
    }

    private boolean validContactNumber() {
        if (jTextField6.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Please Enter Your Contact Number", "Error", 2);
            return false;
        } else if (!jTextField6.getText().matches(".*\\d.*")) {
            JOptionPane.showMessageDialog(null, "Please Enter a Valid Contact Number !!!", "Error", 2);
            jTextField6.setText("");
            return false;
        } else if (jTextField6.getText().length() != 10) {
            JOptionPane.showMessageDialog(null, "Please Enter a 10 Digit Valid Number !!!", "Error", 2);
            jTextField6.setText("");
            return false;
        } else {
            contactNumber = jTextField6.getText();
            return true;
        }
    }

    private boolean validPassword() {
        password = String.valueOf(this.jPasswordField1.getPassword());
        if (password.equals("")) {
            JOptionPane.showMessageDialog(null, "Please Enter Your Password", "Error", 2);
            return false;
        } else if (password.length() < 5) {
            JOptionPane.showMessageDialog(null, "Password should contain atleast 5 characters .", "Error", 2);
            jPasswordField1.setText("");
            return false;
        } else if (checkPasswordExist()) {
            JOptionPane.showMessageDialog(null, "This password is already taken.\nPlease try again !", "Error", 2);
            jPasswordField1.setText("");
            return false;
        } else {
            return true;
        }
    }
//Date dateFromDateChooser = dateChooser.getDate();
//String dateString = String.format("%1$td-%1$tm-%1$tY", dateFromDateChooser);

    public boolean checkPasswordExist() {
        PreparedStatement st;
        ResultSet rs;
        String query = "SELECT * FROM `customerlogin` WHERE `password` = ?";

        try {
            password = String.valueOf(this.jPasswordField1.getPassword());
            st = conn.prepareStatement(query);
            st.setString(1, password);
            rs = st.executeQuery();

            if (rs.next()) {
                return true;
            }
        } catch (SQLException ex) {
            Logger.getLogger(createAccount.class.getName()).log(Level.SEVERE, null, ex);
        }
        return false;
    }

    private boolean validEmail() {
        email = jTextField7.getText();
        if (email.equals("")) {
            JOptionPane.showMessageDialog(null, "Please Enter Your Email Address", "Error", 2);
            return false;
        } else {
            return true;
        }
    }

    private void startChecker1() {
        if (accType == 0) {
            savingRadioBtn.setSelected(true);
            currentRadioBtn.setSelected(false);
            fixedRadioBtn.setSelected(false);
        } else if (accType == 1) {
            savingRadioBtn.setSelected(false);
            currentRadioBtn.setSelected(true);
            fixedRadioBtn.setSelected(false);
        } else if (accType == 2) {
            savingRadioBtn.setSelected(false);
            currentRadioBtn.setSelected(false);
            fixedRadioBtn.setSelected(true);
        }
    }

    private void startChecker2() {
        if (sex == 0) {
            maleRadioBtn.setSelected(true);
            femaleRadioBtn.setSelected(false);
        } else if (sex == 1) {
            maleRadioBtn.setSelected(false);
            femaleRadioBtn.setSelected(true);
        }
    }

    public double getInterest() {
        try {
            PreparedStatement pa;
            ResultSet rs;

            String query = "SELECT * FROM `fixedir` WHERE `duration` = ?";
            pa = conn.prepareStatement(query);
            pa.setInt(1, duration);
            rs = pa.executeQuery();

            if (rs.next()) {
                interestRate = Double.parseDouble(rs.getString(3));
                return interestRate;
            }
        } catch (SQLException ex) {
            Logger.getLogger(createAccount.class.getName()).log(Level.SEVERE, null, ex);
        }
        return 0;
    }

    public void addTable() {
        PreparedStatement pa;
        ResultSet rs;

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);
        String sql = "SELECT * FROM `fixedir`";
        try {
            pa = conn.prepareStatement(sql);
            rs = pa.executeQuery();
            model = (DefaultTableModel) jTable1.getModel();

            while (rs.next()) {
                model.addRow(new String[]{rs.getString(2), rs.getString(3)});
            }
        } catch (SQLException ex) {
            Logger.getLogger(createAccount.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public int getRowCountCustomerLogin() {
        try {
            PreparedStatement pa;
            ResultSet rs;

            String query = "SELECT COUNT(*) FROM `customerlogin` ";
            pa = conn.prepareStatement(query);
            rs = pa.executeQuery();

            if (rs.next()) {
                rowCount1 = Integer.parseInt(rs.getString(1));
            }
        } catch (SQLException ex) {
            Logger.getLogger(calculateBalance.class.getName()).log(Level.SEVERE, null, ex);
        }
        return rowCount1;
    }

    public int getRowCountfixedHolders() {
        try {
            PreparedStatement pa;
            ResultSet rs;

            String query = "SELECT COUNT(*) FROM `fixeddepositholders` ";
            pa = conn.prepareStatement(query);
            rs = pa.executeQuery();

            if (rs.next()) {
                rowCount2 = Integer.parseInt(rs.getString(1));
            }
        } catch (SQLException ex) {
            Logger.getLogger(calculateBalance.class.getName()).log(Level.SEVERE, null, ex);
        }
        return rowCount2;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(createAccount.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(createAccount.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(createAccount.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(createAccount.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fol
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new createAccount().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel adminIcon;
    private javax.swing.JButton createAccBtn;
    private javax.swing.JRadioButton currentRadioBtn;
    private javax.swing.JRadioButton femaleRadioBtn;
    private javax.swing.JRadioButton fixedRadioBtn;
    private javax.swing.JLabel homeIcon;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox<String> jComboBox1;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JRadioButton maleRadioBtn;
    private javax.swing.JRadioButton savingRadioBtn;
    // End of variables declaration//GEN-END:variables
}
